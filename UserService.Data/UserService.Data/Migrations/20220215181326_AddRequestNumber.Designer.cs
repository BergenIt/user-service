// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserService.Data;

namespace UserService.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220215181326_AddRequestNumber")]
    partial class AddRequestNumber
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PermissionPermission", b =>
                {
                    b.Property<Guid>("ChildPermissionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MotherPermissionsId")
                        .HasColumnType("uuid");

                    b.HasKey("ChildPermissionsId", "MotherPermissionsId");

                    b.HasIndex("MotherPermissionsId");

                    b.ToTable("PermissionPermission");
                });

            modelBuilder.Entity("PermissionResourceTag", b =>
                {
                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceTagsId")
                        .HasColumnType("uuid");

                    b.HasKey("PermissionsId", "ResourceTagsId");

                    b.HasIndex("ResourceTagsId");

                    b.ToTable("PermissionResourceTag");
                });

            modelBuilder.Entity("PermissionResourceTag1", b =>
                {
                    b.Property<Guid>("LockedPermissionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LockedResourceTagsId")
                        .HasColumnType("uuid");

                    b.HasKey("LockedPermissionsId", "LockedResourceTagsId");

                    b.HasIndex("LockedResourceTagsId");

                    b.ToTable("PermissionResourceTag1");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PermissionRole");

                    b.HasData(
                        new
                        {
                            PermissionsId = new Guid("00000001-0000-0000-0000-000000000000"),
                            RolesId = new Guid("00000001-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("UserService.Core.Entity.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Roles")
                        .HasColumnType("text");

                    b.Property<string>("Subdivision")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("UserService.Core.Entity.ContractProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NotifyEventType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NotifyEventType");

                    b.ToTable("ContractProfiles");
                });

            modelBuilder.Entity("UserService.Core.Entity.ContractSettingLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractProfileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer");

                    b.Property<string>("UserProppertyName")
                        .HasColumnType("text");

                    b.Property<string>("UserTemplate")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractProfileId");

                    b.ToTable("ContractSettingLines");
                });

            modelBuilder.Entity("UserService.Core.Entity.ContractSettingPropperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContractName")
                        .HasColumnType("text");

                    b.Property<Guid>("ContractSettingLineId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Position")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ContractSettingLineId");

                    b.ToTable("ContractPropperties");
                });

            modelBuilder.Entity("UserService.Core.Entity.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<IDictionary<string, string>>("JsonData")
                        .HasColumnType("jsonb");

                    b.Property<string>("NotifyEventType")
                        .HasColumnType("text");

                    b.Property<string>("ObjectId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("UserService.Core.Entity.NotifyEventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("NotifyEventTypes");
                });

            modelBuilder.Entity("UserService.Core.Entity.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0000-0000-0000-000000000000"),
                            Name = "Default"
                        });
                });

            modelBuilder.Entity("UserService.Core.Entity.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("UserService.Core.Entity.ResourceTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ResourceTags");
                });

            modelBuilder.Entity("UserService.Core.Entity.ResourceTagRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DependentResourceTagValue")
                        .HasColumnType("text");

                    b.Property<int>("PermissionAssert")
                        .HasColumnType("integer");

                    b.Property<string>("ResourceTagValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DependentResourceTagValue");

                    b.HasIndex("ResourceTagValue");

                    b.ToTable("ResourceTagRelations");
                });

            modelBuilder.Entity("UserService.Core.Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("RoleExpiration")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0000-0000-0000-000000000000"),
                            ConcurrencyStamp = "2d55eabd-60e2-4af8-9e2d-38c065074fa9",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN",
                            RoleExpiration = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999)
                        });
                });

            modelBuilder.Entity("UserService.Core.Entity.RoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClaimType");

                    b.HasIndex("RoleId", "ClaimType")
                        .IsUnique();

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("UserService.Core.Entity.RoleNotificationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractProfileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubdivisionId")
                        .HasColumnType("uuid");

                    b.Property<string>("TargetNotifies")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractProfileId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SubdivisionId");

                    b.ToTable("RoleNotificationSettings");
                });

            modelBuilder.Entity("UserService.Core.Entity.ServiceSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ServiceSettingAttribute")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceSettingValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceSettingAttribute")
                        .IsUnique();

                    b.ToTable("ServiceSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 0,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("00000002-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 1,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("00000003-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 2,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("00000004-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 3,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("00000005-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 4,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("00000006-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 5,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("00000007-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 6,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("00000008-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 7,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("00000009-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 8,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("0000000a-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 9,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("0000000b-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 10,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("0000000c-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 11,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("0000000d-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 12,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("0000000e-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 13,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("0000000f-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 14,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("00000010-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 15,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("00000011-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 16,
                            ServiceSettingValue = ""
                        },
                        new
                        {
                            Id = new Guid("00000012-0000-0000-0000-000000000000"),
                            ServiceSettingAttribute = 17,
                            ServiceSettingValue = ""
                        });
                });

            modelBuilder.Entity("UserService.Core.Entity.Subdivision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subdivisions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0000-0000-0000-000000000000"),
                            Name = "Стандартное подразделение"
                        });
                });

            modelBuilder.Entity("UserService.Core.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("PasswordExpiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<string>("RequestNumber")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<Guid>("SubdivisionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UserExpiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("UserLock")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PositionId");

                    b.HasIndex("SubdivisionId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0000-0000-0000-000000000000"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ac2908d-b5a1-4e48-b42e-bc622161480c",
                            Email = "developer@bergen.tech",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEVELOPER@BERGEN.TECH",
                            NormalizedUserName = "DEVELOPER",
                            PasswordExpiration = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            PasswordHash = "MDAwMDgwMjE1MTA4MDMwMDQ1MjI1MDY2MDAwMTI4MTc2MTIzMTAyMDA5MTc3MDY2MDAwMTQ0MDkzMDMyMDA2MTI5MjI0MTk0MDAwMTQ0MDU4MDkzMTYwMTI5MjQwMTk0MDAwMTYwMTIzMTI3MTY5MjM3MjQ4MTk0MDAwMTg0MTc4MTIzMDk3MDMxMDAxMTk1MDAwMTU2MDU2MDM0MjQwMDYzMDA1MTk1MDAwMDM2MDg5MTc5MjQ0MTE3MDA5MTk1MDAwMDYwMTIwMTU3MTA1MDY3MDE1MTk1LUFGMjQzQ0JFMDRFOTREMzM5NkIzNjVEQjBCRDUzODM4",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a00acefd-d89d-4a7e-851f-046bea286646",
                            SubdivisionId = new Guid("00000001-0000-0000-0000-000000000000"),
                            TwoFactorEnabled = false,
                            UserExpiration = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            UserLock = false,
                            UserName = "developer"
                        });
                });

            modelBuilder.Entity("UserService.Core.Entity.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ClaimValue", "ClaimType")
                        .IsUnique();

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0000-0000-0000-000000000000"),
                            ClaimType = "AccessObjectIds",
                            ClaimValue = "00000001-0000-0000-0000-000000000000",
                            UserId = new Guid("00000001-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("UserService.Core.Entity.UserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("UserService.Core.Entity.UserNotificationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractProfileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("TargetNotifies")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContractProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotificationSettings");
                });

            modelBuilder.Entity("UserService.Core.Entity.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0000-0000-0000-000000000000"),
                            RoleId = new Guid("00000001-0000-0000-0000-000000000000"),
                            UserId = new Guid("00000001-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("UserService.Core.Entity.WebHook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid>("ContractProfileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<int>("WebHookContractType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractProfileId");

                    b.ToTable("WebHooks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("UserService.Core.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("UserService.Core.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionPermission", b =>
                {
                    b.HasOne("UserService.Core.Entity.Permission", null)
                        .WithMany()
                        .HasForeignKey("ChildPermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Core.Entity.Permission", null)
                        .WithMany()
                        .HasForeignKey("MotherPermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionResourceTag", b =>
                {
                    b.HasOne("UserService.Core.Entity.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Core.Entity.ResourceTag", null)
                        .WithMany()
                        .HasForeignKey("ResourceTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionResourceTag1", b =>
                {
                    b.HasOne("UserService.Core.Entity.Permission", null)
                        .WithMany()
                        .HasForeignKey("LockedPermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Core.Entity.ResourceTag", null)
                        .WithMany()
                        .HasForeignKey("LockedResourceTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("UserService.Core.Entity.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Core.Entity.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserService.Core.Entity.ContractProfile", b =>
                {
                    b.HasOne("UserService.Core.Entity.NotifyEventType", null)
                        .WithMany("ContractProfiles")
                        .HasForeignKey("NotifyEventType")
                        .HasPrincipalKey("Type")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserService.Core.Entity.ContractSettingLine", b =>
                {
                    b.HasOne("UserService.Core.Entity.ContractProfile", "ContractProfile")
                        .WithMany("ContractSettingLines")
                        .HasForeignKey("ContractProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractProfile");
                });

            modelBuilder.Entity("UserService.Core.Entity.ContractSettingPropperty", b =>
                {
                    b.HasOne("UserService.Core.Entity.ContractSettingLine", "ContractSettingLine")
                        .WithMany("ContractPropperties")
                        .HasForeignKey("ContractSettingLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractSettingLine");
                });

            modelBuilder.Entity("UserService.Core.Entity.ResourceTagRelation", b =>
                {
                    b.HasOne("UserService.Core.Entity.ResourceTag", "DependentResourceTag")
                        .WithMany("ResourceTagRelations")
                        .HasForeignKey("DependentResourceTagValue")
                        .HasPrincipalKey("Tag")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserService.Core.Entity.ResourceTag", "ResourceTag")
                        .WithMany("DependentResourceTagRelations")
                        .HasForeignKey("ResourceTagValue")
                        .HasPrincipalKey("Tag")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DependentResourceTag");

                    b.Navigation("ResourceTag");
                });

            modelBuilder.Entity("UserService.Core.Entity.RoleClaim", b =>
                {
                    b.HasOne("UserService.Core.Entity.ResourceTag", "ResourceTag")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ClaimType")
                        .HasPrincipalKey("Tag")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserService.Core.Entity.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResourceTag");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserService.Core.Entity.RoleNotificationSetting", b =>
                {
                    b.HasOne("UserService.Core.Entity.ContractProfile", "ContractProfile")
                        .WithMany("RoleNotificationSettings")
                        .HasForeignKey("ContractProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Core.Entity.Role", "Role")
                        .WithMany("RoleNotificationSettings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Core.Entity.Subdivision", "Subdivision")
                        .WithMany("RoleNotificationSettings")
                        .HasForeignKey("SubdivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractProfile");

                    b.Navigation("Role");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("UserService.Core.Entity.User", b =>
                {
                    b.HasOne("UserService.Core.Entity.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserService.Core.Entity.Subdivision", "Subdivision")
                        .WithMany("Users")
                        .HasForeignKey("SubdivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("UserService.Core.Entity.UserClaim", b =>
                {
                    b.HasOne("UserService.Core.Entity.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserService.Core.Entity.UserNotification", b =>
                {
                    b.HasOne("UserService.Core.Entity.Notification", null)
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserService.Core.Entity.UserNotificationSetting", b =>
                {
                    b.HasOne("UserService.Core.Entity.ContractProfile", "ContractProfile")
                        .WithMany("UserNotificationSettings")
                        .HasForeignKey("ContractProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Core.Entity.User", "User")
                        .WithMany("UserNotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractProfile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserService.Core.Entity.UserRole", b =>
                {
                    b.HasOne("UserService.Core.Entity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Core.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserService.Core.Entity.WebHook", b =>
                {
                    b.HasOne("UserService.Core.Entity.ContractProfile", "ContractProfile")
                        .WithMany("WebHooks")
                        .HasForeignKey("ContractProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractProfile");
                });

            modelBuilder.Entity("UserService.Core.Entity.ContractProfile", b =>
                {
                    b.Navigation("ContractSettingLines");

                    b.Navigation("RoleNotificationSettings");

                    b.Navigation("UserNotificationSettings");

                    b.Navigation("WebHooks");
                });

            modelBuilder.Entity("UserService.Core.Entity.ContractSettingLine", b =>
                {
                    b.Navigation("ContractPropperties");
                });

            modelBuilder.Entity("UserService.Core.Entity.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("UserService.Core.Entity.NotifyEventType", b =>
                {
                    b.Navigation("ContractProfiles");
                });

            modelBuilder.Entity("UserService.Core.Entity.Position", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("UserService.Core.Entity.ResourceTag", b =>
                {
                    b.Navigation("DependentResourceTagRelations");

                    b.Navigation("ResourceTagRelations");

                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("UserService.Core.Entity.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("RoleNotificationSettings");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("UserService.Core.Entity.Subdivision", b =>
                {
                    b.Navigation("RoleNotificationSettings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UserService.Core.Entity.User", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserNotificationSettings");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
